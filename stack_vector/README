Description

This project is a simple implementation of a stack data structure in C++. It includes a stack class with methods to push, pop,isEmpty,get_size and top at the top element of the stack, as well as a constructor and destructor.

Usage

To use your custom stack class in your own C++ program, you can follow these steps.

1.Include the header file for your stack class in your C++ source code.
2.Create a new stack object  in main.cpp file.
3.Use the push() method to add elements to the stack.
4.Use the top() method to view the top element of the stack.
5.Use the pop() method to remove elements from the stack.
6.Use the isEmpty() method to check if the stack is empty.
7.Use the get_size() method returned size od stack.

Getting Started

Once you have the files, you can compile the source code using a  Makefile.

Makefile 

This Makefile is used to build a C++ project, where the source files are located in the current directory and the output executable file is named "project". The Makefile utilizes the g++ compiler and the make utility to automatically compile and link the source code, as well as manage dependencies.

Commands

make:
This command is used to build the project. It automatically builds the target specified in the $(TARGET) rule. When you run make, it first checks whether the target needs to be rebuilt by comparing the timestamps of the dependencies with that of the target. If any of the dependencies are newer than the target, it rebuilds the target.

make clean: 
This command is used to clean up the build artifacts. It removes the object files, dependency files, and the final executable.

make run: 
This command is used to run the final executable. It first builds the target if it is not already built, and then runs it.
